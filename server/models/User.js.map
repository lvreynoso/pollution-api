{"version":3,"sources":["../../source/models/User.js"],"names":["Schema","mongoose","UserSchema","password","type","String","required","select","username","email","key","timestamps","pre","next","user","isModified","bcrypt","genSalt","err","salt","hash","methods","comparePassword","done","compare","isMatch","User","model"],"mappings":";;;;;;;AAGA;;AACA;;;;AAJA;AACA;AAIA,MAAMA,MAAM,GAAGC,kBAASD,MAAxB;AAEA,MAAME,UAAU,GAAG,IAAIF,MAAJ,CAAW;AAC1BG,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE,IAA1B;AAAgCC,IAAAA,MAAM,EAAE;AAAxC,GADgB;AAE1BC,EAAAA,QAAQ,EAAE;AAAEJ,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAFgB;AAG1BG,EAAAA,KAAK,EAAE;AAAEL,IAAAA,IAAI,EAAEC;AAAR,GAHmB;AAI1BK,EAAAA,GAAG,EAAE;AAAEN,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B;AAJqB,CAAX,EAKhB;AAAEK,EAAAA,UAAU,EAAE;AAAd,CALgB,CAAnB;AAOAT,UAAU,CAACU,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAe;AAClC;AACA,QAAMC,IAAI,GAAG,IAAb;;AACA,MAAI,CAACA,IAAI,CAACC,UAAL,CAAiB,UAAjB,CAAL,EAAkC;AAC9B,WAAOF,IAAI,EAAX;AACH;;AACDG,oBAAOC,OAAP,CAAe,EAAf,EAAmB,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC9BH,sBAAOI,IAAP,CAAYN,IAAI,CAACX,QAAjB,EAA2BgB,IAA3B,EAAiC,CAACD,GAAD,EAAME,IAAN,KAAe;AAC5CN,MAAAA,IAAI,CAACX,QAAL,GAAgBiB,IAAhB;AACAP,MAAAA,IAAI;AACP,KAHD;AAIH,GALD;AAMH,CAZD;;AAcAX,UAAU,CAACmB,OAAX,CAAmBC,eAAnB,GAAqC,UAASnB,QAAT,EAAmBoB,IAAnB,EAAyB;AAC1DP,oBAAOQ,OAAP,CAAerB,QAAf,EAAyB,KAAKA,QAA9B,EAAwC,CAACe,GAAD,EAAMO,OAAN,KAAkB;AACtDF,IAAAA,IAAI,CAACL,GAAD,EAAMO,OAAN,CAAJ;AACH,GAFD;AAGH,CAJD;;AAMA,MAAMC,IAAI,GAAGzB,kBAAS0B,KAAT,CAAe,MAAf,EAAuBzB,UAAvB,CAAb;;eACewB,I","sourcesContent":["// user.js\n// our User model\n\nimport mongoose from 'mongoose'\nimport bcrypt from 'bcryptjs'\nconst Schema = mongoose.Schema;\n\nconst UserSchema = new Schema({\n    password: { type: String, required: true, select: false },\n    username: { type: String, required: true},\n    email: { type: String },\n    key: { type: String, required: true }\n}, { timestamps: true });\n\nUserSchema.pre(\"save\", function(next) {\n    // encrypt password\n    const user = this;\n    if (!user.isModified(`password`)) {\n        return next();\n    }\n    bcrypt.genSalt(10, (err, salt) => {\n        bcrypt.hash(user.password, salt, (err, hash) => {\n            user.password = hash;\n            next();\n        })\n    })\n});\n\nUserSchema.methods.comparePassword = function(password, done) {\n    bcrypt.compare(password, this.password, (err, isMatch) => {\n        done(err, isMatch);\n    });\n};\n\nconst User = mongoose.model('User', UserSchema);\nexport default User;\n"],"file":"User.js"}